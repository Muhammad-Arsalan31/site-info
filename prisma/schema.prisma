generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model adonis_schema {
  id             Int       @id @default(autoincrement())
  name           String    @db.VarChar(255)
  batch          Int
  migration_time DateTime? @default(now()) @db.Timestamptz(6)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model adonis_schema_versions {
  version Int

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model agreement {
  id                Int            @default(autoincrement())
  remark            String?        @db.VarChar(150)
  created_at        DateTime?      @db.Timestamptz(6)
  updated_at        DateTime?      @db.Timestamptz(6)
  deleted_at        DateTime?      @db.Timestamptz(6)
  file_id           String?        @db.VarChar(250)
  file_url          String?        @db.VarChar(250)
  file_name         String?        @db.VarChar(250)
  years             String?        @db.VarChar(50)
  project_client_id Int
  project_info_id   Int
  project_client    project_client @relation(fields: [project_client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "project_client_fkey")
  project_info      project_info   @relation(fields: [project_info_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "project_info_fkey")

  @@ignore
}

model book {
  id          Int      @id @default(autoincrement())
  code        String   @unique(map: "books_code_ukey") @db.VarChar(100)
  name        String   @db.VarChar(250)
  author      String?  @db.VarChar(100)
  book_cat_id Int
  remark      String?  @db.VarChar(250)
  file_id     String?  @db.VarChar(250)
  file_url    String?  @db.VarChar(250)
  file_name   String?  @db.VarChar(250)
  book_cat    book_cat @relation(fields: [book_cat_id], references: [id])
}

model book_cat {
  bname String @unique(map: "book_cat_id_key") @db.VarChar(100)
  id    Int    @id
  book  book[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model certificate {
  id                Int            @default(autoincrement())
  remark            String?        @db.VarChar(150)
  file_id           String?        @db.VarChar(250)
  file_url          String?        @db.VarChar(250)
  file_name         String?        @db.VarChar(250)
  created_at        DateTime?      @db.Timestamptz(6)
  updated_at        DateTime?      @db.Timestamptz(6)
  deleted_at        DateTime?      @db.Timestamptz(6)
  project_client_id Int
  project_info_id   Int
  project_client    project_client @relation(fields: [project_client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "project_client_fkey")
  project_info      project_info   @relation(fields: [project_info_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "project_info_fkey")

  @@ignore
}

model emp_department {
  id            Int             @id
  department    String          @unique(map: "unique_department") @db.VarChar(100)
  employee_info employee_info[]
}

model emp_designation {
  id            Int             @id
  designation   String          @unique(map: "unique_designation") @db.VarChar(100)
  employee_info employee_info[]
}

model employee_info {
  id                 Int             @id(map: "employee_info_key_primary") @default(autoincrement())
  code               String          @unique(map: "emp_info_key_unique") @db.VarChar(50)
  name               String          @db.VarChar(50)
  cnic               BigInt          @unique(map: "emp_info_cnic_ukey")
  emp_department_id  Int
  emp_designation_id Int
  address            String          @db.VarChar(250)
  email              String          @db.VarChar(100)
  contact            BigInt          @unique(map: "emp_info_phone_ukey")
  date_of_joining    DateTime        @db.Timestamptz(6)
  file_id            String?         @db.VarChar(250)
  file_url           String?         @db.VarChar(250)
  file_name          String?         @db.VarChar(250)
  emp_department     emp_department  @relation(fields: [emp_department_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "department_fkey")
  emp_designation    emp_designation @relation(fields: [emp_designation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "designation_fkey")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model Renamedexport {
  id   Int     @default(autoincrement())
  name String? @db.VarChar(100)

  @@map("export")
  @@ignore
}

model feasibility_cat {
  id       Int    @id(map: "feasi_cat_pkey")
  category String @unique(map: "feasibility_cat_id_ukey")
}

model huawei {
  id        Int       @id
  cname     String?   @db.VarChar(150)
  pname     String?   @db.VarChar(150)
  po        String?   @db.VarChar(150)
  po_date   DateTime? @db.Date
  desc      String?
  siteid    String?   @db.VarChar(150)
  pcode     String?   @db.VarChar(150)
  file_name String?   @db.VarChar(150)
  dueqty    Decimal?  @db.Decimal(100, 0)
}

model invoice {
  id                Int            @id @default(autoincrement())
  inv_num           String?        @db.VarChar(150)
  inv_date          DateTime?      @db.Date
  remarks           String?        @db.VarChar(150)
  file_id           String?        @db.VarChar(250)
  file_url          String?        @db.VarChar(250)
  file_name         String?        @db.VarChar(250)
  po                String?        @db.VarChar(150)
  sinv_num          String?        @db.VarChar(150)
  project_client_id Int
  project_info_id   Int
  project_client    project_client @relation(fields: [project_client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "project_client_fkey")
  project_info      project_info   @relation(fields: [project_info_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "project_info_fkey")
}

model invoice_num {
  id          Int         @id @default(autoincrement())
  invoice_num String?     @unique(map: "invoice_num_ukey") @db.VarChar(50)
  site_info   site_info[]
}

model po_num {
  id              Int           @id @default(autoincrement())
  po_num          String?       @unique(map: "po_num_ukey") @db.VarChar(50)
  site_client_id  Int?
  site_project_id Int?
  site_client     site_client?  @relation(fields: [site_client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "client_fkey")
  site_project    site_project? @relation(fields: [site_project_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "project_name_fkey")
  site_info       site_info[]
}

model project_cat {
  id   Int    @id
  name String @unique(map: "project_cat_ukey") @db.VarChar(50)
}

model project_client {
  id               Int                @id(map: "proposal-clients_pkey") @default(autoincrement())
  name             String             @db.VarChar(100)
  agreement        agreement[]        @ignore
  certificate      certificate[]      @ignore
  invoice          invoice[]
  project_info     project_info[]
  reports          reports[]
  technical_report technical_report[]
}

model project_info {
  id                  Int                @id @default(autoincrement())
  project_cat_id      Int
  project_client_id   Int
  dos                 DateTime           @db.Timestamptz(6)
  description         String?
  file_id             String?            @db.VarChar(250)
  file_url            String?            @db.VarChar(250)
  file_name           String?            @db.VarChar(250)
  proposal_categoryId Int?
  project_client      project_client     @relation(fields: [project_client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "client_fkey")
  proposal_info       proposal_info      @relation(fields: [project_cat_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "project_fkey")
  proposal_category   proposal_category? @relation(fields: [proposal_categoryId], references: [id])
  agreement           agreement[]        @ignore
  certificate         certificate[]      @ignore
  invoice             invoice[]
  reports             reports[]
}

model project_info_file {
  project_id   Int       @id @default(autoincrement())
  file_id      String    @unique @db.VarChar(250)
  filr_url     String?   @unique @db.VarChar(250)
  file_version String    @db.VarChar(5)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  deleted_at   DateTime? @db.Timestamptz(6)
  site_info    site_info @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "site_info_id")
}

model proposal_category {
  id               Int                @id
  name             String             @unique(map: "unique_cattegory") @db.VarChar(50)
  project_info     project_info[]
  proposal_info    proposal_info[]
  technical_report technical_report[]
}

model proposal_info {
  id                Int                @id @default(autoincrement())
  name              String             @unique(map: "unique_proposal_name")
  project_client_id Int?
  proposal_info_id  Int
  dos               DateTime           @db.Timestamptz(6)
  description       String?
  year              Int?
  submission_status String?            @db.VarChar(255)
  file_id           String?            @db.VarChar(250)
  file_url          String?            @db.VarChar(250)
  file_name         String?            @db.VarChar(250)
  proposal_category proposal_category  @relation(fields: [proposal_info_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "proposal_cat_fkey")
  project_info      project_info[]
  technical_report  technical_report[]
}

model reports {
  year              String?        @db.VarChar(150)
  remark            String?        @db.VarChar(225)
  file_id           String?        @db.VarChar(250)
  file_url          String?        @db.VarChar(250)
  file_name         String?        @db.VarChar(250)
  id                Int            @id @default(autoincrement())
  project_client_id Int
  project_info_id   Int
  project_client    project_client @relation(fields: [project_client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "project_client_fkey")
  project_info      project_info   @relation(fields: [project_info_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "project_info_fkey")
}

model site_client {
  id           Int            @id @default(autoincrement())
  name         String         @unique(map: "clientname")
  po_num       po_num[]
  site_info    site_info[]
  site_project site_project[]
}

model site_info {
  id                Int                @id(map: "site_info_id") @default(autoincrement())
  site_id           String             @unique(map: "site_id_ukey") @db.VarChar(50)
  site_client_id    Int
  site_project_id   Int
  surveyour_name    String?            @db.VarChar(50)
  date              DateTime?          @db.Timestamptz(6)
  description       String?
  po_num_id         Int?
  invoice_num_id    Int?
  remarks           String?
  file_url          String?            @db.VarChar(250)
  file_id           String?            @db.VarChar(250)
  file_name         String?            @db.VarChar(250)
  site_client       site_client        @relation(fields: [site_client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "client_id")
  invoice_num       invoice_num?       @relation(fields: [invoice_num_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "invoice_status_id")
  po_num            po_num?            @relation(fields: [po_num_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "po_num_id")
  site_project      site_project       @relation(fields: [site_project_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "project_name_id")
  project_info_file project_info_file?
  site_info_file    site_info_file?
}

model site_info_file {
  site_id    Int       @id @default(autoincrement())
  file_id    String    @unique @db.VarChar(250)
  file_name  String    @db.VarChar(250)
  filr_url   String?   @unique @db.VarChar(250)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  site_info  site_info @relation(fields: [site_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "site_info_id")
}

model site_project {
  id             Int         @id @default(autoincrement())
  name           String      @unique(map: "projectname")
  site_client_id Int
  site_client    site_client @relation(fields: [site_client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "client_id")
  po_num         po_num[]
  site_info      site_info[]
}

model technical_report {
  id                Int               @id(map: "feasibility_info_pkey") @default(autoincrement())
  project_cat_id    Int
  project_client_id Int
  dos               DateTime          @db.Timestamptz(6)
  proposal_info_id  Int
  description       String?
  file_id           String?           @db.VarChar(250)
  file_url          String?           @db.VarChar(250)
  file_name         String?           @db.VarChar(250)
  project_client    project_client    @relation(fields: [project_cat_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "client_fkey")
  proposal_info     proposal_info     @relation(fields: [project_client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "project_fkey")
  proposal_category proposal_category @relation(fields: [proposal_info_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "proposal_fkey")
}
